package com.example.databasefailover;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.bson.Document;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;

import com.mongodb.client.MongoCollection;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

public class DatabaseHandler implements HttpHandler {
    @Override
    public void handle(HttpExchange exchange) throws IOException {
        if ("POST".equals(exchange.getRequestMethod())) {
            InputStream requestBody = exchange.getRequestBody();
            byte[] requestData = readAllBytes(requestBody);

            String data = new String(requestData);

            boolean mongoAvailable = MongoDBConnection.isAvailable();
            boolean elasticSearchAvailable = ElasticSearchConnection.isAvailable();

            if (mongoAvailable) {
                storeInMongoDB(data);
            } else if (elasticSearchAvailable) {
                storeInElasticSearch(data);
            } else {
                sendResponse(exchange, 503, "Both databases are unavailable");
                return;
            }

            sendResponse(exchange, 200, "Data processed");
        } else {
            sendResponse(exchange, 405, "Method Not Allowed");
        }
    }

    private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {
        exchange.sendResponseHeaders(statusCode, response.getBytes().length);
        try (OutputStream os = exchange.getResponseBody()) {
            os.write(response.getBytes());
        }
    }

    private byte[] readAllBytes(InputStream inputStream) throws IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        int nRead;
        byte[] data = new byte[1024];
        while ((nRead = inputStream.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }
        buffer.flush();
        return buffer.toByteArray();
    }

    private void storeInMongoDB(String data) {
        MongoCollection<Document> collection = MongoDBConnection.getDatabase().getCollection("mycollection");
        Document document = new Document("data", data);
        collection.insertOne(document);
    }

    private void storeInElasticSearch(String data) throws IOException {
        try (RestHighLevelClient client = ElasticSearchConnection.getClient()) {
            IndexRequest request = new IndexRequest("myindex")
                    .source("data", data);
            IndexResponse response = client.index(request, RequestOptions.DEFAULT);
        }
    }
}
